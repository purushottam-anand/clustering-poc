{"version":3,"sources":["../../src/libs/address.es6"],"names":[],"mappings":";;;;;;;;kBAKwB,O;;AALxB;;;;AACA;;;;;;AAEA,IAAI,iBAAJ;;AAEe,SAAS,OAAT,CAAiB,MAAjB,EAAyB;AACtC,MAAI,QAAJ,EAAc;AACZ,WAAO,QAAP;AACD;;AAED,aAAW,uBAAY,mBAAW;AAChC,QAAM,aAAa,OAAO,OAAP,EAAnB;;AAEA,gCAAa,UAAC,GAAD,EAAM,QAAN,EAAmB;AAC9B,UAAI,GAAJ,EAAS,MAAM,GAAN;AACT,2BAAY,UAAZ,IAAwB,kBAAxB,EAAkC,UAAU,OAA5C;AACD,KAHD;AAID,GAPU,EAOR,KAPQ,CAOF,eAAO;AACd,YAAQ,KAAR,CAAc,GAAd;;;AAGA,YAAQ,IAAR,CAAa,CAAb;AACD,GAZU,CAAX;;AAcA,SAAO,QAAP;AACD","file":"address.es6","sourcesContent":["import externalIP from 'external-ip';\nimport Promise from 'bluebird';\n\nlet _address;\n\nexport default function address(server) {\n  if (_address) {\n    return _address;\n  }\n\n  _address = new Promise(resolve => {\n    const defAddress = server.address();\n\n    externalIP()((err, hostname) => {\n      if (err) throw err;\n      resolve({...defAddress, hostname, protocol: 'https'});\n    });\n  }).catch(err => {\n    console.error(err);\n\n    // serious failure\n    process.exit(1);\n  });\n\n  return _address;\n}\n"]}