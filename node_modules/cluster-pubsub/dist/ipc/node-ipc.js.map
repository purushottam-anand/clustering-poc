{"version":3,"sources":["../../src/ipc/node-ipc.es6"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;AAIA,IAAM,OAAO,SAAP,IAAO;AAAA,SAAM,CAAN;AAAA,CAAb;AACA,IAAM,cAAc;AAClB,SAAO,IADW;AAElB,YAAU,EAFQ;AAGlB,iBAAe,IAHG,E;AAIlB,sBAAoB,IAJF,E;AAKlB,kBAAgB,IALE,E;AAMlB,2BAAyB,IANP;AAOlB,6BAA2B,IAPT;AAQlB,uBAAqB,I;AARH,CAApB;;AAWA,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,MAAM,QAAQ,QAAQ,KAAR,CAAc,GAAd,CAAd;AACA,MAAI,QAAQ,OAAZ;AACA,MAAI,UAAU,EAAd;;AAEA,MAAI,MAAM,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAQ,MAAM,CAAN,CAAR;AACA,cAAU,MAAM,CAAN,CAAV;AACD;;AAED,MAAI;AACF,WAAO,IAAI,MAAJ,CAAW,KAAX,EAAkB,OAAlB,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;IAEK,O;;;AACJ,mBAAY,EAAZ,EAA2B;AAAA,QAAX,IAAW,yDAAJ,EAAI;;AAAA;;AACzB,WAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,WAAlB,EAA+B,IAA/B,CAAP;;AADyB,2FAGnB,KAAK,KAHc;;AAAA,UAmB3B,KAnB2B,GAmBnB;AACN,gBAAU,MAAK,cAAL,CAAoB,IAApB,OADJ;AAEN,YAAM,MAAK,UAAL,CAAgB,IAAhB,OAFA;AAGN,iBAAW,MAAK,eAAL,CAAqB,IAArB,OAHL;AAIN,UAAI,MAAK,QAAL,CAAc,IAAd,OAJE;AAKN,YAAM,MAAK,UAAL,CAAgB,IAAhB,OALA;AAMN,cAAQ,MAAK,YAAL,CAAkB,IAAlB,OANF;AAON,cAAQ,MAAK,YAAL,CAAkB,IAAlB,OAPF;AAQN,kBAAY,MAAK,gBAAL,CAAsB,IAAtB,OARN;AASN,sBAAgB,MAAK,oBAAL,CAA0B,IAA1B;AATV,KAnBmB;;;AAKzB,UAAK,MAAL,GAAc,KAAK,MAAnB;AACA,UAAK,QAAL,GAAgB,IAAI,GAAJ,EAAhB;AACA,UAAK,WAAL,GAAmB,IAAI,GAAJ,EAAnB;AACA,UAAK,IAAL,GAAY,IAAZ;;AAEA,sBAAI,MAAJ,CAAW,EAAX,GAAgB,KAAK,EAAL,IAAW,QAA3B;AACA,sBAAI,MAAJ,CAAW,KAAX,GAAmB,CAAnB;AACA,sBAAI,MAAJ,CAAW,UAAX,GAAwB,EAAxB;AACA,sBAAI,MAAJ,CAAW,WAAX,GAAyB,MAAK,MAAL,GAAc,SAAd,GAA0B,WAAnD;AACA,sBAAI,MAAJ,CAAW,cAAX,GAA4B,EAA5B;AACA,sBAAI,MAAJ,CAAW,QAAX,GAAsB,MAAM,KAAK,QAAjC;AACA,sBAAI,MAAJ,CAAW,MAAX,GAAoB,CAAC,MAAK,KAA1B;AAhByB;AAiB1B;;;;iCAcY,M,EAAQ;AACnB,WAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB,EAA0B,IAA1B;AACD;;;iCAEY,M,EAAQ;AACnB,WAAK,QAAL,CAAc,MAAd,CAAqB,MAArB;AACA,WAAK,gBAAL,CAAsB,MAAtB;AACD;;;qCAEgB,M,EAAQ;AACvB,UAAM,SAAS,KAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,CAAf;;AAEA,WAAK,UAAL,CAAgB,MAAhB;AACD;;;+BAEU,M,EAAQ;AACjB,UAAI,MAAJ,EAAY;AACV,YAAI;AACF,iBAAO,WAAP,GAAqB,IAArB;AACA,iBAAO,OAAP;;AAEA,cAAI,KAAK,IAAL,CAAU,yBAAV,KAAwC,KAA5C,EAAmD;AACjD,iBAAK,SAAL,CAAe,cAAf,EAA+B,EAAC,SAAS,cAAV,EAA0B,MAAM,OAAO,EAAvC,EAA/B;AACD;AACF,SAPD,CAOE,OAAO,CAAP,EAAU;;AAEX;AACF;AACF;;;6BAEQ,O,EAAkB;AAAA,wCAAN,IAAM;AAAN,YAAM;AAAA;;AACzB,aAAO,KAAK,EAAL,8BAAsB,OAAtB,SAAoC,IAApC,EAAP;AACD;;;+BAEU,O,EAAkB;AAAA,yCAAN,IAAM;AAAN,YAAM;AAAA;;AAC3B,aAAO,KAAK,EAAL,8BAAsB,OAAtB,SAAoC,IAApC,EAAP;AACD;;;yCAEoB,O,EAAkB;AAAA,yCAAN,IAAM;AAAN,YAAM;AAAA;;AACrC,aAAO,KAAK,cAAL,8BAAkC,OAAlC,SAAgD,IAAhD,EAAP;AACD;;;mCAEc,I,EAAM,O,EAAS,I,EAAM;AAClC,WAAK,UAAL,CAAgB,IAAhB,EAAsB,OAAtB,EAA+B,IAA/B,EAAqC,KAArC;AACD;;;+BAEU,I,EAAM,O,EAAS,I,EAAkB;AAAA;;AAAA,UAAZ,GAAY,yDAAN,IAAM;;AAC1C,UAAI,CAAC,GAAL,EAAU;AACR,eAAO,KAAK,eAAL,CAAqB,EAAC,UAAD,EAAO,QAAQ,gBAAf,EAAiC,gBAAjC,EAA0C,UAA1C,EAAgD,QAAhD,EAArB,EAA2E,IAA3E,CAAP;AACD;;AAED,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,eAAL,CAAqB,EAAC,UAAD,EAAO,QAAQ,gBAAf,EAAiC,gBAAjC,EAA0C,UAA1C,EAAgD,gBAAhD,EAAyD,cAAzD,EAAiE,QAAjE,EAArB,EAA4F,IAA5F;AACD,OAFM,CAAP;AAGD;;;oCAEe,O,EAAS,I,EAAyB;AAAA,UAAnB,MAAmB,yDAAV,EAAU;AAAA,UAAN,IAAM;;AAChD,aAAO,KAAK,eAAL,CAAqB,EAAC,QAAQ,kBAAT,EAA6B,gBAA7B,EAAsC,UAAtC,EAA4C,cAA5C,EAAoD,UAApD,EAArB,EAAgF,IAAhF,CAAP;AACD;;;0CAEiF,Q,EAAU;AAAA;;AAAA,UAA3E,IAA2E,QAA3E,IAA2E;AAAA,UAArE,OAAqE,QAArE,OAAqE;AAAA,UAA5D,IAA4D,QAA5D,IAA4D;AAAA,UAAtD,OAAsD,QAAtD,OAAsD;AAAA,UAA7C,MAA6C,QAA7C,MAA6C;AAAA,UAArC,MAAqC,QAArC,MAAqC;AAAA,UAA7B,GAA6B,QAA7B,GAA6B;AAAA,6BAAxB,MAAwB;AAAA,UAAxB,MAAwB,+BAAf,EAAe;;AAC1F,UAAM,UAAU,KAAK,aAAL,EAAhB;;AAEA,UAAI,WAAW,kBAAf,EAAmC;AACjC,aAAK,SAAL,CAAe,gBAAf,EAAiC,EAAC,IAAI,OAAL,EAAc,gBAAd,EAAuB,UAAvB,EAAjC,EAA+D,MAA/D,EAAuE,IAAvE;AACA,eAAO,UAAP;AACD;;AAED,UAAI,YAAJ;AACA,UAAI,cAAJ;;AAEA,UAAM,WAAW,SAAX,QAAW,MAAO;AACtB,qBAAa,GAAb;AACA,gBAAQ,IAAI,IAAZ;AACD,OAHD;;AAKA,UAAM,UAAU,SAAV,OAAU,GAAM;AACpB,eAAK,cAAL,CAAoB,KAApB,EAA2B,QAA3B;AACA,eAAO,EAAC,UAAD,EAAO,gBAAP,EAAgB,UAAhB,EAAsB,QAAtB,EAAP;AACD,OAHD;;AAKA,UAAI,gBAAJ;;;AAGA,UAAI,WAAW,gBAAf,EAAiC;AAC/B,kBAAU,YAAV;AACD;;AAED,UAAI,GAAJ,EAAS;AACP,YAAM,OAAO,OAAO,GAAP,KAAe,QAAf,IAA2B,MAAM,CAAjC,GAAqC,GAArC,GAA2C,KAAK,iBAA7D;;AAEA,aAAK,IAAL,CAAa,OAAb,SAAwB,OAAxB,EAAmC,QAAnC;AACA,cAAM,WAAW,OAAX,EAAoB,IAApB,CAAN;AACD;;AAED,UAAM,MAAM;AACV,YAAI,KAAK,MADC;AAEV,cAAM,EAAC,IAAI,OAAL,EAAc,gBAAd,EAAuB,UAAvB;AAFI,OAAZ;;AAKA,WAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,EAAwB,GAAxB;;AAEA;AACD;;;oCAEe;AACd,aAAO,iBAAO,WAAP,CAAmB,EAAnB,EAAuB,QAAvB,CAAgC,KAAhC,CAAP;AACD;;;2BAEM,I,EAAoB;AAAA;;AAAA,UAAd,EAAc,yDAAT;AAAA,eAAM,CAAN;AAAA,OAAS;;AACzB,wBAAI,MAAJ,CAAW,WAAX,GAAyB,IAAzB;;AAEA,wBAAI,KAAK,MAAL,GAAc,UAAd,GAA2B,OAA/B,EAAwC,YAAM;AAC5C,0BAAI,MAAJ,CAAW,YAAX,GAA0B,IAA1B,C;;AAEA,0BAAI,MAAJ,CAAW,EAAX,CAAc,WAAd,EAA2B,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC1C,cAAM,SAAS,OAAO,EAAtB;;AAEA,kBAAQ,GAAR,CAAY,OAAK,QAAjB;;AAEA,cAAI,CAAC,OAAK,IAAL,CAAU,mBAAf,EAAoC;AAClC,gBAAI,CAAC,OAAK,QAAL,CAAc,GAAd,CAAkB,MAAlB,CAAL,EAAgC;AAC9B,qBAAK,GAAL,CAAS,qBAAT,EAAgC,MAAhC;AACA,qBAAO,OAAK,UAAL,CAAgB,MAAhB,CAAP;AACD;AACF;;AAED,cAAM,eAAe,SAAf,YAAe,GAAM;AACzB,gBAAI,OAAK,IAAL,CAAU,uBAAV,KAAsC,KAA1C,EAAiD;AAC/C,qBAAK,SAAL,CAAe,cAAf,EAA+B,EAAC,SAAS,WAAV,EAAuB,MAAM,MAA7B,EAA/B;AACD;;AAED,mBAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,EAA6B,MAA7B;;AAEA,mBAAK,IAAL,CAAU,MAAV,EAAkB,YAAlB;AACA,mBAAK,KAAL,uBAAiC,MAAjC;AACA,mBAAK,KAAL,yBAAiC,MAAjC,EAA2C,MAA3C;AACD,WAVD;;AAYA,cAAI,OAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,CAAJ,EAAkC;AAAA;AAChC,kBAAM,aAAa,OAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,CAAnB;;AAEA,kBAAI,cAAc,WAAW,QAA7B,EAAuC;AAAA;AACrC,sBAAI,YAAJ;AACA,sBAAM,sBAAoB,MAA1B;;AAEA,sBAAM,YAAY,SAAZ,SAAY,GAAM;AACtB,iCAAa,GAAb;AACA,2BAAK,GAAL,CAAS,qCAAT,EAAgD,MAAhD;AACA,2BAAO,OAAK,UAAL,CAAgB,MAAhB,CAAP;AACD,mBAJD;;AAMA,sBAAM,WAAW,SAAX,QAAW,GAAM;AACrB,2BAAK,cAAL,CAAoB,KAApB,EAA2B,SAA3B;AACA,2BAAK,GAAL,CAAS,oDAAT,EAA+D,MAA/D;AACA,2BAAK,UAAL,CAAgB,UAAhB;AACA;AACD,mBALD;;AAOA,yBAAK,IAAL,CAAU,KAAV,EAAiB,SAAjB;;AAEA,wBAAM,WAAW,QAAX,EAAqB,IAArB,CAAN;;AAEA,sBAAI;AACF;AAAA;AAAA,2BAAO,OAAK,IAAL,CAAU,MAAV,EAAkB,aAAlB;AAAP;AAAA;AACD,mBAFD,CAEE,OAAO,CAAP,EAAU;;AAEX;AAzBoC;;AAAA;AA0BtC;;AAED,qBAAK,GAAL,CAAS,iCAAT,EAA4C,MAA5C;AACA,qBAAK,UAAL,CAAgB,UAAhB;AAhCgC;;AAAA;AAiCjC;;AAED;AACD,SA5DD;;AA8DA,0BAAI,MAAJ,CAAW,EAAX,CAAc,UAAd,EAA0B,UAAC,GAAD,EAAM,MAAN,EAAiB;AACzC,cAAM,SAAS,OAAO,EAAtB;;AAEA,iBAAK,KAAL,CAAW,UAAX,EAAuB,MAAvB;AACA,iBAAK,KAAL,eAAuB,MAAvB,EAAiC,MAAjC;AACD,SALD;;AAOA,0BAAI,MAAJ,CAAW,EAAX,CAAc,aAAd,EAA6B,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC5C,cAAM,SAAS,OAAO,EAAtB;;AAEA,iBAAK,WAAL,CAAiB,MAAjB,CAAwB,MAAxB;;AAH4C;AAAA;AAAA;;AAAA;AAK5C,iCAA0B,OAAK,WAAL,CAAiB,OAAjB,EAA1B,8HAAsD;AAAA;;AAAA,kBAAxC,OAAwC;;AACpD,kBAAI,YAAY,MAAhB,EAAwB;AACtB,uBAAK,GAAL,CAAS,0BAAT,EAAqC,MAArC;AACA;AACD;AACF;AAV2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAY5C,iBAAK,UAAL,CAAgB,MAAhB;AACD,SAbD;;AAeA,YAAI,OAAK,IAAL,CAAU,cAAV,KAA6B,KAAjC,EAAwC;AACtC,4BAAI,MAAJ,CAAW,EAAX,CAAc,YAAd,EAA4B,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC3C,gBAAM,SAAS,OAAO,EAAtB;AACA,gBAAM,OAAO,IAAI,IAAjB;;AAEA,gBAAI,IAAI,CAAR;AACA,gBAAM,UAAU,SAAV,OAAU,MAAO;AACrB,kBAAI,GAAJ,EAAS;AACT,qBAAK,IAAL,CAAU,MAAV,EAAkB,iBAAlB,eAAyC,IAAzC,IAA+C,OAAO,KAAK,IAA3D,EAAiE,MAAM,GAAvE;AACD,aAHD;;AAKA,gBAAI,UAAU,KAAK,OAAnB;AACA,gBAAI,YAAY,SAAZ,IAAyB,YAAY,YAAzC,EAAuD;AACrD,8BAAc,OAAd;AACD;;AAED,mBAAK,KAAL,CAAW,YAAX,EAAyB,MAAzB,EAAiC,IAAjC,EAAuC,OAAvC;AACA,mBAAK,KAAL,iBAAyB,OAAzB,EAAoC,MAApC,EAA4C,KAAK,IAAjD,EAAuD,OAAvD;AACD,WAjBD;AAkBD;;AAED,0BAAI,MAAJ,CAAW,EAAX,CAAc,GAAd,EAAmB,UAAC,KAAD,EAAQ,GAAR,EAAgB;AACjC,cAAI,UAAU,WAAd,EAA2B;AACzB;AACD;;AAED,cAAM,SAAS,IAAI,EAAnB;;AAEA,cAAI,OAAK,WAAL,CAAiB,GAAjB,CAAqB,MAArB,CAAJ,EAAkC;AAChC,mBAAK,KAAL,CAAW,KAAX,EAAkB,MAAlB,EAA0B,IAAI,IAA9B;AACD;AACF,SAVD;;AAYA,0BAAI,MAAJ,CAAW,EAAX,CAAc,qBAAd,EAAqC,kBAAU;AAC7C,cAAM,SAAS,OAAO,EAAtB;;AAEA,iBAAK,GAAL,CAAS,eAAT,EAA0B,MAA1B,EAAkC,OAAO,WAAzC;;AAEA,cAAI,CAAC,OAAO,WAAZ,EAAyB;AACvB,mBAAK,WAAL,CAAiB,MAAjB,CAAwB,MAAxB;AACD;;AAED,iBAAK,KAAL,0BAAoC,MAApC;AACA,iBAAK,KAAL,4BAAoC,MAApC,EAA8C,MAA9C;AACD,SAXD;;AAaA,YAAI,OAAK,IAAL,CAAU,kBAAV,KAAiC,KAArC,EAA4C;AAC1C,4BAAI,MAAJ,CAAW,EAAX,CAAc,gBAAd,EAAgC,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC/C,gBAAM,SAAS,OAAO,EAAtB;;AAEA,gBAAI,IAAJ,CAAS,IAAT,GAAgB,MAAhB;;AAEA,mBAAK,SAAL,CAAe,cAAf,EAA+B,IAAI,IAAnC,EAAyC,CAAC,MAAD,CAAzC,EAAmD,IAAI,IAAJ,CAAS,IAA5D;AACD,WAND;AAOD;;AAED,YAAI,OAAK,IAAL,CAAU,aAAV,KAA4B,KAAhC,EAAuC;AACrC,4BAAI,MAAJ,CAAW,EAAX,CAAc,WAAd,EAA2B,UAAC,GAAD,EAAM,MAAN,EAAiB;AAC1C,gBAAM,KAAK,IAAI,IAAJ,CAAS,EAApB;AACA,gBAAM,SAAS,OAAO,EAAtB;;AAEA,mBAAK,IAAL,eAAsB,EAAtB,EAA4B,gBAAQ;AAClC,qBAAK,IAAL,CAAU,MAAV,EAAkB,eAAlB,eAAuC,IAAI,IAA3C,IAAiD,OAAO,IAAI,IAAJ,CAAS,IAAjE,EAAuE,MAAM,KAAK,IAAlF;AACD,aAFD;;AAIA,gBAAM,OAAO,IAAI,IAAJ,CAAS,IAAtB;;AAEA,gBAAI,IAAJ,CAAS,IAAT,GAAgB,IAAI,IAAJ,CAAS,IAAzB;;AAEA,mBAAO,IAAI,IAAJ,CAAS,IAAhB;;AAEA,mBAAK,IAAL,CAAU,IAAV,EAAgB,cAAhB,EAAgC,IAAI,IAApC;AACD,WAfD;AAgBD;;AAED,YAAI,OAAK,IAAL,CAAU,aAAV,KAA4B,KAAhC,EAAuC;AACrC,4BAAI,MAAJ,CAAW,EAAX,CAAc,UAAd,EAA0B,eAAO;AAC/B,mBAAK,KAAL,eAAuB,IAAI,IAAJ,CAAS,EAAhC,EAAsC,IAAI,IAA1C;AACD,WAFD;AAGD;;AAED,gBAAQ,QAAR,CAAiB,EAAjB;AACD,OAzKD;;AA2KA,wBAAI,MAAJ,CAAW,KAAX;AACD;;;8BAES,O,EAAS,I,EAAyB;AAAA,UAAnB,MAAmB,yDAAV,EAAU;AAAA,UAAN,IAAM;;AAC1C,UAAM,UAAU,OAAO,IAAP,KAAgB,QAAhB,GAA2B,UAAU,IAAV,CAA3B,GAA6C,IAA7D;AACA,UAAI,uCAAc,KAAK,WAAL,CAAiB,IAAjB,EAAd,EAAJ;;AAEA,UAAI,OAAJ,EAAa;AACX,kBAAU,QAAQ,MAAR,CAAe;AAAA,iBAAK,QAAQ,IAAR,CAAa,CAAb,CAAL;AAAA,SAAf,CAAV;AACD,OAFD,MAEO,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AACnC,kBAAU,CAAC,IAAD,CAAV;AACD;;AARyC;AAAA;AAAA;;AAAA;AAU1C,8BAAqB,OAArB,mIAA8B;AAAA,cAAnB,MAAmB;;AAC5B,cAAI,OAAO,OAAP,CAAe,MAAf,IAAyB,CAAC,CAA9B,EAAiC;AAC/B;AACD;;AAED,eAAK,IAAL,CAAU,MAAV,EAAkB,OAAlB,EAA2B,IAA3B;AACD;AAhByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB3C;;;yBAEI,I,EAAM,O,EAAS,I,EAAM;AACxB,UAAI;AACF,YAAI,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAJ,EAAgC;AAC9B,cAAM,SAAS,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAf;;AAEA,cAAI;AACF,8BAAI,MAAJ,CAAW,IAAX,CAAgB,MAAhB,EAAwB,OAAxB,EAAiC,EAAC,IAAI,kBAAI,MAAJ,CAAW,EAAhB,EAAoB,UAApB,EAA0B,UAA1B,EAAjC;AACD,WAFD,CAEE,OAAO,CAAP,EAAU;AACV,oBAAQ,KAAR,CAAc,CAAd;AACD;AACF;AACF,OAVD,CAUE,OAAO,CAAP,EAAU;AACV,gBAAQ,KAAR,CAAc,CAAd;AACD;AACF;;;;;;kBAGY,O","file":"node-ipc.es6","sourcesContent":["import ipc from 'node-ipc';\nimport IPC from '../ipc.es6';\nimport crypto from 'crypto';\n\n// TODO: Add groups via key\n\nconst noop = () => 0;\nconst defaultOpts = {\n  debug: true,\n  appspace: '',\n  allowPeerEmit: true, // true: slaves can message a specific slave by origin\n  allowPeerBroadcast: true, // true: slaves can talk amongst themselves\n  allowSlaveEmit: true, // true: slaves can talk to master\n  allowAuthorizeBroadcast: true,\n  allowDeauthorizeBroadcast: true,\n  allowAllConnections: true // false: set acceptable connections via accept, disconnect\n};\n\nfunction regexCast(pattern) {\n  const parts = pattern.split('/');\n  let regex = pattern;\n  let options = '';\n\n  if (parts.length > 1) {\n    regex = parts[1];\n    options = parts[2];\n  }\n\n  try {\n    return new RegExp(regex, options);\n  } catch (e) {\n    return false;\n  }\n}\n\nclass NodeIPC extends IPC {\n  constructor(id, opts = {}) {\n    opts = Object.assign({}, defaultOpts, opts);\n\n    super(opts.debug);\n\n    this.remote = opts.remote;\n    this.accepted = new Map();\n    this.connections = new Map();\n    this.opts = opts;\n\n    ipc.config.id = opts.id || 'socket';\n    ipc.config.retry = 5;\n    ipc.config.maxRetries = 20;\n    ipc.config.networkHost = this.remote ? '0.0.0.0' : '127.0.0.1';\n    ipc.config.maxConnections = 10;\n    ipc.config.appspace = id || opts.appspace;\n    ipc.config.silent = !this.debug;\n  }\n\n  Slave = {\n    volatile: this._slaveVolatile.bind(this),\n    emit: this._slaveEmit.bind(this),\n    broadcast: this._slaveBroadcast.bind(this),\n    on: this._slaveOn.bind(this),\n    once: this._slaveOnce.bind(this),\n    accept: this._slaveAccept.bind(this),\n    reject: this._slaveReject.bind(this),\n    disconnect: this._slaveDisconnect.bind(this),\n    removeListener: this._slaveRemoveListener.bind(this)\n  };\n\n  _slaveAccept(origin) {\n    this.accepted.set(origin, true);\n  }\n\n  _slaveReject(origin) {\n    this.accepted.delete(origin);\n    this._slaveDisconnect(origin);\n  }\n\n  _slaveDisconnect(origin) {\n    const socket = this.connections.get(origin);\n\n    this._terminate(socket);\n  }\n\n  _terminate(socket) {\n    if (socket) {\n      try {\n        socket.__destroyed = true;\n        socket.destroy();\n\n        if (this.opts.allowDeauthorizeBroadcast !== false) {\n          this.broadcast('peer-message', {channel: 'disconnected', data: socket.id});\n        }\n      } catch (e) {\n        // ignore\n      }\n    }\n  }\n\n  _slaveOn(channel, ...args) {\n    return this.on(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveOnce(channel, ...args) {\n    return this.on(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveRemoveListener(channel, ...args) {\n    return this.removeListener(`slave-emit-${channel}`, ...args);\n  }\n\n  _slaveVolatile(dest, channel, data) {\n    this._slaveEmit(dest, channel, data, false);\n  }\n\n  _slaveEmit(dest, channel, data, awk = true) {\n    if (!awk) {\n      return this._handleTransmit({dest, action: 'master-message', channel, data, awk}, noop);\n    }\n\n    return new Promise((resolve, reject) => {\n      this._handleTransmit({dest, action: 'master-message', channel, data, resolve, reject, awk}, noop);\n    });\n  }\n\n  _slaveBroadcast(channel, data, except = [], dest) {\n    return this._handleTransmit({action: 'master-broadcast', channel, data, except, dest}, noop);\n  }\n\n  _handleTransmit({dest, channel, data, resolve, action, reject, awk, except = []}, callback) {\n    const eventId = this._generateUUID();\n\n    if (action === 'master-broadcast') {\n      this.broadcast('master-message', {id: eventId, channel, data}, except, dest);\n      return callback();\n    }\n\n    let tid;\n    let event;\n\n    const accepted = res => {\n      clearTimeout(tid);\n      resolve(res.data);\n    };\n\n    const timeout = () => {\n      this.removeListener(event, accepted);\n      reject({dest, channel, data, awk});\n    };\n\n    let awkChan;\n\n    // if its not a master-broadcast\n    if (action === 'master-message') {\n      awkChan = 'master-awk';\n    }\n\n    if (awk) {\n      const wait = typeof awk === 'number' && awk > 0 ? awk : this.resDefaultTimeout;\n\n      this.once(`${awkChan}-${eventId}`, accepted);\n      tid = setTimeout(timeout, wait);\n    }\n\n    const req = {\n      id: this.origin,\n      data: {id: eventId, channel, data}\n    };\n\n    this.emit(dest, action, req);\n\n    callback();\n  }\n\n  _generateUUID() {\n    return crypto.randomBytes(10).toString('hex');\n  }\n\n  listen(port, cb = () => 0) {\n    ipc.config.networkPort = port;\n\n    ipc[this.remote ? 'serveNet' : 'serve'](() => {\n      ipc.config.stopRetrying = true; // TODO test corner cases\n\n      ipc.server.on('authorize', (req, socket) => {\n        const origin = socket.id;\n\n        console.log(this.accepted);\n\n        if (!this.opts.allowAllConnections) {\n          if (!this.accepted.has(origin)) {\n            this.log('Force disconnection', origin);\n            return this._terminate(socket);\n          }\n        }\n\n        const updateSocket = () => {\n          if (this.opts.allowAuthorizeBroadcast !== false) {\n            this.broadcast('peer-message', {channel: 'connected', data: origin});\n          }\n\n          this.connections.set(origin, socket);\n\n          this.emit(origin, 'authorized');\n          this._emit(`slave-emit-connect`, origin);\n          this._emit(`slave-emit-connect-${origin}`, origin);\n        };\n\n        if (this.connections.has(origin)) {\n          const prevSocket = this.connections.get(origin);\n\n          if (prevSocket && prevSocket.writable) {\n            let tid;\n            const event = `is-alive-${origin}`;\n\n            const prevAlive = () => {\n              clearTimeout(tid);\n              this.log('Force disconnection; new connection', origin);\n              return this._terminate(socket);\n            };\n\n            const prevDead = () => {\n              this.removeListener(event, prevAlive);\n              this.log('Terminating previous connection due to no response', origin);\n              this._terminate(prevSocket);\n              updateSocket();\n            };\n\n            this.once(event, prevAlive);\n\n            tid = setTimeout(prevDead, 2000);\n\n            try {\n              return this.emit(origin, 'slave-alive');\n            } catch (e) {\n              // continue to terminate the previous\n            }\n          }\n\n          this.log('Terminating previous connection', origin);\n          this._terminate(prevSocket);\n        }\n\n        updateSocket();\n      });\n\n      ipc.server.on('is-alive', (req, socket) => {\n        const origin = socket.id;\n\n        this._emit('is-alive', origin);\n        this._emit(`is-alive-${origin}`, origin);\n      });\n\n      ipc.server.on('deauthorize', (req, socket) => {\n        const origin = socket.id;\n\n        this.connections.delete(origin);\n\n        for (const [, _socket] of this.connections.entries()) {\n          if (_socket === socket) {\n            this.log('found another connection', origin);\n            return;\n          }\n        }\n\n        this._terminate(socket);\n      });\n\n      if (this.opts.allowSlaveEmit !== false) {\n        ipc.server.on('slave-emit', (req, socket) => {\n          const origin = socket.id;\n          const data = req.data;\n\n          let v = 0;\n          const respond = res => {\n            if (v++) return;\n            this.emit(origin, 'master-received', {...data, _data: data.data, data: res});\n          };\n\n          let channel = data.channel;\n          if (channel === 'connect' || channel === 'disconnect') {\n            channel = `_${channel}`;\n          }\n\n          this._emit('slave-emit', origin, data, respond);\n          this._emit(`slave-emit-${channel}`, origin, data.data, respond);\n        });\n      }\n\n      ipc.server.on('*', (event, req) => {\n        if (event === 'authorize') {\n          return;\n        }\n\n        const origin = req.id;\n\n        if (this.connections.has(origin)) {\n          this._emit(event, origin, req.data);\n        }\n      });\n\n      ipc.server.on('socket.disconnected', socket => {\n        const origin = socket.id;\n\n        this.log('Disconnecting', origin, socket.__destroyed);\n\n        if (!socket.__destroyed) {\n          this.connections.delete(origin);\n        }\n\n        this._emit(`slave-emit-disconnect`, origin);\n        this._emit(`slave-emit-disconnect-${origin}`, origin);\n      });\n\n      if (this.opts.allowPeerBroadcast !== false) {\n        ipc.server.on('broadcast-peer', (req, socket) => {\n          const origin = socket.id;\n\n          req.data.from = origin;\n\n          this.broadcast('peer-message', req.data, [origin], req.data.dest);\n        });\n      }\n\n      if (this.opts.allowPeerEmit !== false) {\n        ipc.server.on('emit-peer', (req, socket) => {\n          const id = req.data.id;\n          const origin = socket.id;\n\n          this.once(`peer-got-${id}`, data => {\n            this.emit(origin, 'peer-received', {...req.data, _data: req.data.data, data: data.data});\n          });\n\n          const dest = req.data.dest;\n\n          req.data.from = req.data.dest;\n\n          delete req.data.dest;\n\n          this.emit(dest, 'peer-message', req.data);\n        });\n      }\n\n      if (this.opts.allowPeerEmit !== false) {\n        ipc.server.on('peer-got', req => {\n          this._emit(`peer-got-${req.data.id}`, req.data);\n        });\n      }\n\n      process.nextTick(cb);\n    });\n\n    ipc.server.start();\n  }\n\n  broadcast(channel, data, except = [], dest) {\n    const pattern = typeof dest === 'string' ? regexCast(dest) : null;\n    let origins = [...this.connections.keys()];\n\n    if (pattern) {\n      origins = origins.filter(a => pattern.test(a));\n    } else if (typeof dest === 'string') {\n      origins = [dest];\n    }\n\n    for (const origin of origins) {\n      if (except.indexOf(origin) > -1) {\n        continue;\n      }\n\n      this.emit(origin, channel, data);\n    }\n  }\n\n  emit(dest, channel, data) {\n    try {\n      if (this.connections.has(dest)) {\n        const socket = this.connections.get(dest);\n\n        try {\n          ipc.server.emit(socket, channel, {id: ipc.config.id, dest, data});\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\nexport default NodeIPC;\n"]}