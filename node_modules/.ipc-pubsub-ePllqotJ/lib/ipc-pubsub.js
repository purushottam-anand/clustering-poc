"use strict";

var _url = _interopRequireDefault(require("url"));

var _ipcPubsub2Spm = _interopRequireDefault(require("./ipc-pubsub-2-spm"));

var _ipcPubsub3Mpm = _interopRequireDefault(require("./ipc-pubsub-3-mpm"));

var _ipcPubsub4RpmMqtt = _interopRequireDefault(require("./ipc-pubsub-4-rpm-mqtt"));

var _ipcPubsub5RpmRedis = _interopRequireDefault(require("./ipc-pubsub-5-rpm-redis"));

var _ipcPubsub6RpmNats = _interopRequireDefault(require("./ipc-pubsub-6-rpm-nats"));

var _ipcPubsub7RpmPgsql = _interopRequireDefault(require("./ipc-pubsub-7-rpm-pgsql"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
**  IPC-PubSub -- Inter-Process-Communication Publish-Subscribe
**  Copyright (c) 2017-2019 Dr. Ralf S. Engelschall <rse@engelschall.com>
**
**  Permission is hereby granted, free of charge, to any person obtaining
**  a copy of this software and associated documentation files (the
**  "Software"), to deal in the Software without restriction, including
**  without limitation the rights to use, copy, modify, merge, publish,
**  distribute, sublicense, and/or sell copies of the Software, and to
**  permit persons to whom the Software is furnished to do so, subject to
**  the following conditions:
**
**  The above copyright notice and this permission notice shall be included
**  in all copies or substantial portions of the Software.
**
**  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*  Publish-Subscribe API  */
class PubSub {
  constructor(url) {
    let m;
    const urlParsed = new _url.default.URL(url);
    if (urlParsed.protocol === "spm:") this.strategy = new _ipcPubsub2Spm.default(urlParsed);else if (urlParsed.protocol === "mpm:") this.strategy = new _ipcPubsub3Mpm.default(urlParsed);else if (typeof urlParsed.protocol === "string" && (m = urlParsed.protocol.match(/^rpm(?:\+([a-z]+))?:$/)) !== null) {
      if (m[1] === "mqtt") this.strategy = new _ipcPubsub4RpmMqtt.default(urlParsed);else if (m[1] === "redis") this.strategy = new _ipcPubsub5RpmRedis.default(urlParsed);else if (m[1] === "nats") this.strategy = new _ipcPubsub6RpmNats.default(urlParsed);else if (m[1] === "pgsql") this.strategy = new _ipcPubsub7RpmPgsql.default(urlParsed);else throw new Error(`unknown implementation strategy "${url}"`);
    } else throw new Error(`unknown implementation strategy "${url}"`);
  }

  open(...args) {
    return this.strategy.open(...args);
  }

  publish(...args) {
    return this.strategy.publish(...args);
  }

  subscribe(...args) {
    return this.strategy.subscribe(...args);
  }

  close(...args) {
    return this.strategy.close(...args);
  }

}

module.exports = PubSub;
