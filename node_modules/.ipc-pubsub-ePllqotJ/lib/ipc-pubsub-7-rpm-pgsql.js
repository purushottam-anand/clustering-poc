"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _fs = _interopRequireDefault(require("fs"));

var _pgPubsub = _interopRequireDefault(require("pg-pubsub"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
**  IPC-PubSub -- Inter-Process-Communication Publish-Subscribe
**  Copyright (c) 2017-2019 Dr. Ralf S. Engelschall <rse@engelschall.com>
**
**  Permission is hereby granted, free of charge, to any person obtaining
**  a copy of this software and associated documentation files (the
**  "Software"), to deal in the Software without restriction, including
**  without limitation the rights to use, copy, modify, merge, publish,
**  distribute, sublicense, and/or sell copies of the Software, and to
**  permit persons to whom the Software is furnished to do so, subject to
**  the following conditions:
**
**  The above copyright notice and this permission notice shall be included
**  in all copies or substantial portions of the Software.
**
**  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*  Publish-Subscribe for Remote-Process-Model (RPM) with PostgreSQL LISTEN/NOTIFY  */
class PubSub {
  constructor(url) {
    this.url = url;
    this.opened = false;
    if (this.url.pathname) this.database = this.url.pathname.replace(/^\//, "");else throw new Error("require path in URL");
  }
  /*  open connection  */


  open() {
    if (this.opened) throw new Error("already opened");
    const config = {
      database: this.database,
      host: this.url.hostname,
      port: this.url.port ? (0, _parseInt2.default)(this.url.port) : 5432
    };
    if (this.url.username) config.user = this.url.username;
    if (this.url.password) config.password = this.url.password;

    if (this.url.searchParams !== undefined && (this.url.searchParams.get("tls") || this.url.searchParams.get("ca") || this.url.searchParams.get("key") || this.url.searchParams.get("crt"))) {
      config.ssl = {
        rejectUnauthorized: false
      };

      if (this.url.searchParams.get("ca")) {
        config.ssl.ca = _fs.default.readFileSync(this.url.searchParams.get("ca")).toString();
        config.ssl.rejectUnauthorized = true;
      }

      if (this.url.searchParams.get("key")) config.ssl.key = _fs.default.readFileSync(this.url.searchParams.get("key")).toString();
      if (this.url.searchParams.get("crt")) config.ssl.cert = _fs.default.readFileSync(this.url.searchParams.get("crt")).toString();
    }

    this.client = new _pgPubsub.default(config, {
      log: msg => {}
    });
    return this.client.retry.try().then(() => {
      this.opened = true;
    });
  }
  /*  publish message to channel  */


  publish(channel, value) {
    if (!this.opened) throw new Error("still not opened");
    channel = channel.replace(/\//g, "-");
    return this.client.publish(channel, value);
  }
  /*  subscribe to channel(s) for messages  */


  subscribe(channelPrefix, callback) {
    if (!this.opened) throw new Error("still not opened");
    if (channelPrefix.match(/[+#]/)) throw new Error("PostgreSQL LISTEN/NOTIFY mechanism does not support wildcard channels");
    const channel = channelPrefix.replace(/\//g, "-");

    const handler = data => {
      callback(data, channelPrefix);
    };

    this.client.addChannel(channel, handler);
    return _promise.default.resolve({
      unsubscribe: () => {
        this.client.removeChannel(channel, handler);
        return _promise.default.resolve();
      }
    });
  }
  /*  close connection  */


  close() {
    if (!this.opened) throw new Error("still not opened");
    this.client.close();
    delete this.client;
    this.opened = false;
    return _promise.default.resolve();
  }

}

exports.default = PubSub;
