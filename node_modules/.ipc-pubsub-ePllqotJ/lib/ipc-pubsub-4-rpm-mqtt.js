"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = void 0;

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _fs = _interopRequireDefault(require("fs"));

var _mqtt = _interopRequireDefault(require("mqtt"));

var _mqttTopics = _interopRequireDefault(require("mqtt-topics"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
**  IPC-PubSub -- Inter-Process-Communication Publish-Subscribe
**  Copyright (c) 2017-2019 Dr. Ralf S. Engelschall <rse@engelschall.com>
**
**  Permission is hereby granted, free of charge, to any person obtaining
**  a copy of this software and associated documentation files (the
**  "Software"), to deal in the Software without restriction, including
**  without limitation the rights to use, copy, modify, merge, publish,
**  distribute, sublicense, and/or sell copies of the Software, and to
**  permit persons to whom the Software is furnished to do so, subject to
**  the following conditions:
**
**  The above copyright notice and this permission notice shall be included
**  in all copies or substantial portions of the Software.
**
**  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*  Publish-Subscribe for Remote-Process-Model (RPM) with MQTT Broker  */
class PubSub {
  constructor(url) {
    this.url = url;
    this.opened = false;
  }
  /*  open connection  */


  open() {
    if (this.opened) throw new Error("already opened");
    return new _bluebird.default((resolve, reject) => {
      let url;
      const options = {};

      if (this.url.seachParams !== undefined && (this.url.seachParams.get("tls") || this.url.seachParams.get("ca") || this.url.seachParams.get("key") || this.url.seachParams.get("crt"))) {
        url = `mqtts://${this.url.hostname}:${this.url.port ? this.url.port : 8883}`;
        options.rejectUnauthorized = false;

        if (this.url.seachParams.get("ca")) {
          options.ca = _fs.default.readFileSync(this.url.seachParams.get("ca")).toString();
          options.rejectUnauthorized = true;
        }

        if (this.url.seachParams.get("key")) options.key = _fs.default.readFileSync(this.url.seachParams.get("key")).toString();
        if (this.url.seachParams.get("crt")) options.cert = _fs.default.readFileSync(this.url.seachParams.get("crt")).toString();
      } else url = `mqtt://${this.url.hostname}:${this.url.port ? this.url.port : 1883}`;

      if (this.url.username) options.username = this.url.username;
      if (this.url.password) options.password = this.url.password;
      if (this.url.pathname) this.scope = this.url.pathname.replace(/^\/([^/]+).*/, "$1/");else this.scope = "";
      this.client = _mqtt.default.connect(url, options);
      let handled = false;
      this.client.on("connect", () => {
        if (handled) return;
        handled = true;
        this.opened = true;
        resolve();
      });
      this.client.on("error", err => {
        if (handled) return;
        handled = true;
        reject(err);
      });
    });
  }
  /*  publish message to channel  */


  publish(channel, value) {
    if (!this.opened) throw new Error("still not opened");
    return new _bluebird.default((resolve, reject) => {
      this.client.publish(this.scope + channel, (0, _stringify.default)(value), {
        qos: 0
      }, err => {
        if (err) reject(err);else resolve();
      });
    });
  }
  /*  subscribe to channel(s) for messages  */


  subscribe(channelPrefix, callback) {
    if (!this.opened) throw new Error("still not opened");

    const handler = (topic, message) => {
      message = JSON.parse(message);

      if (_mqttTopics.default.match(this.scope + channelPrefix, topic)) {
        topic = topic.replace(new RegExp(`^${this.scope}`), "");
        callback(message, topic);
      }
    };

    this.client.on("message", handler);
    this.client.subscribe(this.scope + channelPrefix, {
      qos: 0
    });
    return _bluebird.default.resolve({
      unsubscribe: () => {
        this.client.removeListener("message", handler);
        return _bluebird.default.resolve();
      }
    });
  }
  /*  close connection  */


  close() {
    if (!this.opened) throw new Error("still not opened");
    this.client.end();
    delete this.client;
    this.opened = false;
    return _bluebird.default.resolve();
  }

}

exports.default = PubSub;
